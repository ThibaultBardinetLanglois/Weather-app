{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","api","useState","input","setInput","data","setData","sky","setSky","useEffect","appDiv","document","querySelector","skyAppearance","i","classList","length","includes","remove","weather","description","add","className","type","placeholder","value","onChange","event","target","onKeyPress","key","axios","get","then","response","catch","err","console","log","meteoForecast","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","dateBuilder","Date","Math","round","main","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yNAgHeA,EA5GH,WAEV,IAAMC,EACC,mCADDA,EAEE,2CAGR,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,MAAjC,mBAAOG,EAAP,KAAaC,EAAb,KA0BA,EAAsBJ,mBAAS,IAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KAyCA,OAxCAC,qBAAU,WACR,GAAIJ,EAAJ,CAGA,IAFA,IAAMK,EAASC,SAASC,cAAc,QAClCC,EAAgB,CAAC,QAAS,SAAU,QAAS,QAAS,MAAO,UAAW,QACpEC,EAAI,EAAGA,EAAIJ,EAAOK,UAAUC,OAAQF,IACvCD,EAAcI,SAASP,EAAOK,UAAUD,KACzCJ,EAAOK,UAAUG,OAAOR,EAAOK,UAAUD,IAG7CN,EAAO,WAC8B,cAAjCH,EAAKc,QAAQ,GAAGC,cAClBV,EAAOK,UAAUM,IAAI,SACrBb,EAAO,kBAE4B,oBAAjCH,EAAKc,QAAQ,GAAGC,cAClBV,EAAOK,UAAUM,IAAI,SACrBb,EAAO,aAELH,EAAKc,QAAQ,GAAGC,YAAaH,SAAS,UACxCP,EAAOK,UAAUM,IAAI,UACrBb,EAAO,YAELH,EAAKc,QAAQ,GAAGC,YAAaH,SAAS,UACxCP,EAAOK,UAAUM,IAAI,SACrBb,EAAO,YAELH,EAAKc,QAAQ,GAAGC,YAAaH,SAAS,SACxCP,EAAOK,UAAUM,IAAI,OACrBb,EAAO,eAELH,EAAKc,QAAQ,GAAGC,YAAaH,SAAS,aACxCP,EAAOK,UAAUM,IAAI,WACrBb,EAAO,UAELH,EAAKc,QAAQ,GAAGC,YAAaH,SAAS,UACxCP,EAAOK,UAAUM,IAAI,QACrBb,EAAO,cAER,CAACH,IAGF,qBAAKiB,UAAU,MAAf,SACE,iCACE,6CACA,kDACA,qBAAKA,UAAU,aAAf,SACE,uBACEC,KAAK,OACLD,UAAU,aACVE,YAAY,gBACZC,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OAAWvB,EAASuB,EAAMC,OAAOH,QAC3CI,WAAY,SAACF,GAAD,OAlEA,SAACA,GACJ,UAAdA,EAAMG,KACPC,IAAMC,IAAN,UACG/B,EADH,qBACwBE,EADxB,kBACuCF,IACrCgC,MAAK,SAACC,GACR5B,EAAQ4B,EAAS7B,SAEd8B,OAAM,SAACC,GACRC,QAAQC,IAAI,gBA0DeC,CAAcZ,QAGxCtB,GACC,sBAAKiB,UAAU,sBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BjB,EAAKmC,KAAhC,IAAuCnC,EAAKoC,IAAIC,WAChD,qBAAKpB,UAAU,OAAf,SArFQ,SAACqB,GACnB,IAEIC,EADO,CAAC,WAAY,QAAS,QAAS,WAAY,QAAS,WAAY,UAC5DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAJS,CAAC,UAAW,aAAW,OAAQ,QAAS,MAAO,OAAQ,UAAW,UAAQ,YAAa,UAAW,WAAY,YAIxGL,EAAEM,YACjBC,EAAOP,EAAEQ,cACTC,EAAOT,EAAEU,WACTC,EAAUX,EAAEY,aAChB,MAAM,GAAN,OAAUX,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,EAAlC,oBAAkDE,EAAlD,aAA2DE,EAA3D,OA4EiCE,CAAY,IAAIC,WAEzC,sBAAKnC,UAAU,cAAf,UACE,sBAAKA,UAAU,cAAf,UAA8BoC,KAAKC,MAAMtD,EAAKuD,KAAKC,KAAO,QAA1D,WACA,qBAAKvC,UAAU,UAAf,SAA0Bf,gBC1FzBuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7D,SAAS8D,eAAe,SAM1BX,M","file":"static/js/main.8ccbdbbe.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\n\nconst App = () => {\n\n  const api = {\n    key: 'fa3e9ba787fac651d904bde79673a0bf',\n    base: 'https://api.openweathermap.org/data/2.5/'\n  }\n\n  const [input, setInput] = useState(\"\");\n  const [data, setData] = useState(null);\n  const dateBuilder = (d) => {\n    let months = [\"Janvier\", \"Février\", \"Mars\", \"Avril\", \"Mai\", \"Juin\", \"Juillet\", \"Août\", \"Septembre\", \"Octobre\", \"Novembre\", \"Decembre\"];\n    let days = [\"Dimanche\", \"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\", \"Samedi\"];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    let hour = d.getHours();\n    let minutes = d.getMinutes();\n    return `${day} ${date} ${month} ${year}, heure: ${hour}h ${minutes}min`;\n  }\n  \n  const meteoForecast = (event) => {\n    if(event.key === 'Enter') {\n      axios.get(\n      `${api.base}weather?q=${input}&appid=${api.key}`\n      ).then((response) => {\n      setData(response.data);\n      \n      }).catch((err) => {\n        console.log(\"Not found\");\n      })\n    }\n  }\n\n  const [sky, setSky] = useState(\"\");\n  useEffect(() => {\n    if(!data) return;\n    const appDiv = document.querySelector(\".App\");\n    let skyAppearance = [\"sunny\", \"stormy\", \"rainy\", \"snowy\", \"fog\", \"drizzle\", \"mist\"];\n    for(let i = 0; i < appDiv.classList.length; i++) {\n      if(skyAppearance.includes(appDiv.classList[i])) {\n        appDiv.classList.remove(appDiv.classList[i]);\n      }\n    }\n    setSky(\"Nuageux\");\n    if((data.weather[0].description) === \"clear sky\") {\n      appDiv.classList.add(\"sunny\");\n      setSky(\"Ensoleillé\");\n    }\n    if((data.weather[0].description) === \"overcast clouds\") {\n      appDiv.classList.add(\"rainy\");\n      setSky(\"Pluvieux\");\n    }\n    if((data.weather[0].description).includes(\"wind\")) {\n      appDiv.classList.add(\"stormy\");\n      setSky(\"Venteux\");\n    }\n    if((data.weather[0].description).includes(\"snow\")) {\n      appDiv.classList.add(\"snowy\");\n      setSky(\"Neigeux\");\n    }\n    if((data.weather[0].description).includes(\"fog\")) {\n      appDiv.classList.add(\"fog\");\n      setSky(\"Brouillard\");\n    }\n    if((data.weather[0].description).includes(\"drizzle\")) {\n      appDiv.classList.add(\"drizzle\");\n      setSky(\"Brume\");\n    }\n    if((data.weather[0].description).includes(\"mist\")) {\n      appDiv.classList.add(\"mist\");\n      setSky(\"Bruine\");\n    }\n  }, [data]);\n\n  return (\n    <div className=\"App\">\n      <main>\n        <h1>Weather App</h1>\n        <h3>Entrez une ville</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\" \n            placeholder=\"Rechercher...\"\n            value={input} \n            onChange={(event) => setInput(event.target.value)}\n            onKeyPress={(event) => meteoForecast(event)}\n            />\n        </div>\n        {data &&\n          <div className=\"city-meteo-forecast\">\n            <div className=\"location-box\">\n              <div className=\"location\">{data.name} {data.sys.country}</div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temperature\">{Math.round(data.main.temp - 273.15)}°C</div>\n              <div className=\"weather\">{sky}</div>\n            </div>\n          </div>\n        }\n        \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}